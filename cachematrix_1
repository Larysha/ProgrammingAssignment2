
## makeCacheMatrix makes a matrix called x (which is defined by the user) and
## uses the object i as a placeholder to cache the inverse of x. cacheSolve can
## then access the inverse of x through the getinverse function defined in
## makeCacheMatrix. If the inverse has not been calculated (i is null), then
##the inverse will be calculated using the solve function and stored for the
## future in i.

## makeCacheMatrix is creating a matrix to set and retrieve its value. The
## inverse of the matrix is then set and retrieved.

makeCacheMatrix <- function(x = matrix()) {
  i <- NULL
  set <- function(y) {
    x <<- y
    i <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) i <<- inverse
  getinverse <- function() i
  list(set = set,
       get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}

## cacheSolve is using makeCacheMatrix to retrive the inverse of the matrix,
## but if it hasn't been calculated then it does the computation in this function
## and saves this to the cache

cacheSolve <- function(x, ...) {
  i <- x$getinverse()
  if (!is.null(i)) {
    message("getting cached data")
    return(i)
  }
  data <- x$get()
  i <- solve(data, ...)
  x$setinverse(i)
  i
}
